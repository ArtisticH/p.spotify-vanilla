// Ïò§Î•∏Ï™Ω ÌôîÏÇ¥Ìëú Ìö®Í≥º
(async function rightArrows() {
  const $rightArrows = document.querySelectorAll('.rightarrow__box');
  let $rightArrowTitle;
  let $rightArrowLine;
  let $rightArrowCircle;
  let $rightArrowImg;

  function enterEvent(e) {
    $rightArrowTitle = e.target.querySelector('.rightarrow__box__title-line__title');
    $rightArrowLine = e.target.querySelector('.rightarrow__box__title-line__line');;
    $rightArrowCircle = e.target.querySelector('.rightarrow__box__arrow');;
    $rightArrowImg = e.target.querySelector('.rightarrow__box__arrow__img');

    $rightArrowTitle.classList.add('overed');
    $rightArrowLine.classList.add('overed');
    $rightArrowCircle.classList.add('overed');
    $rightArrowImg.classList.add('overed');
  }

  async function leaveEvent(e) {
    $rightArrowTitle.classList.remove('overed');
    $rightArrowLine.classList.replace('overed', 'rewind');
    $rightArrowCircle.classList.remove('overed');
    $rightArrowImg.classList.remove('overed');

    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, 300);
    });

    $rightArrowLine.classList.remove('rewind');
  }

  for(let rightArrow of $rightArrows) {
    rightArrow.addEventListener('pointerenter', enterEvent);
  }

  for(let rightArrow of $rightArrows) {
    rightArrow.addEventListener('pointerleave', leaveEvent);
  }
})();

// Ïù∏Ìä∏Î°ú
class Intro {
  constructor() {
    // Ïù∏Ìä∏Î°ú
    this.$introLogo = document.querySelector('.intro-logo');
    this.$introFlower = document.querySelector('.intro-flower');
    this.init = this.init.bind(this);
    this.showFlower = this.showFlower.bind(this);
    this.disappearIntro = this.disappearIntro.bind(this);
  }
  animate({timing, draw, duration}) {
    let start = performance.now();
    requestAnimationFrame(function animate(time) {
      let timeFraction = (time - start) / duration;
      if (timeFraction > 1) timeFraction = 1;
      let progress = timing(timeFraction)
      draw(progress); 
      if (timeFraction < 1) {
        requestAnimationFrame(animate);
      }
    });
  }
  // Ï≤òÏùåÏóê Î°úÍ≥† ÏûàÍ≥† ÍΩÉÏù¥ 1.5Ï¥à ÌõÑÏóê Îì±Ïû•
  // 4.5Ï¥à ÌõÑÏóê Î°úÍ≥† ÏÇ¨ÎùºÏßÄÍ≥†, Ïä§ÌÅ¨Î°§ ÌíÄÎ¶¨Í≥†, 
  // 0.5Ï¥àÍ∞Ñ ÍΩÉ ÏÇ¨ÎùºÏßÄÎ©∞ Ïä¨ÎùºÏù¥Îìú Îì±Ïû•
  init() {
    // Îß®Ï≤òÏùåÏúºÎ°ú Ïò¨Î†§
    window.scrollTo(0, 0);
    // Ïä§ÌÅ¨Î°§ Î©àÏ∂∞
    document.body.style.overflowY = 'hidden';
    // 1.5Ï¥à ÌõÑÏóê ÍΩÉ Î≥¥Ïó¨Ï£ºÍ≥†
    // 4.5Ï¥à ÌõÑÏóê Î°úÍ≥†ÏôÄ ÍΩÉ ÏÇ¨ÎùºÏßÑÎã§. 
    setTimeout(this.showFlower, 1500);
    setTimeout(this.disappearIntro, 4500);
  }
  showFlower() {
    // ÍΩÉ Îì±Ïû•
    this.$introFlower.style.display = 'block';
  }
  disappearIntro() {
    // Ïä§ÌÅ¨Î°§ ÌíÄÎ¶¨Í≥† Î°úÍ≥† ÏÇ¨ÎùºÏ†∏
    this.$introLogo.style.display = 'none';
    document.body.style.overflowY = '';
    // ÍΩÉ 0.5Ï¥à ÎèôÏïà Ï§ÑÏñ¥Îì§Î©∞ ÏÇ¨ÎùºÏßÄÍ≥†
    // üìç ÎßàÏßÄÎßâÏóê ÏÇ¨ÎùºÏßÄÎäî Í±∞ Ï∂îÍ∞Ä
    this.animate({
      duration: 500,
      timing: function(timeFraction) {
        return timeFraction;
      },
      // üìç Ïó¨Í∏∞ ÌôîÏÇ¥Ìëú Ìï®ÏàòÏù∏Í±∞ Ï£ºÎ™©, Í∑∏ÎÉ• Ìï®ÏàòÎäî thisÍ∞Ä undefinedÎêúÎã§. 
      // scaleÏùÄ 1 -> 0.5
      draw: (progress) => {
        this.$introFlower.style.transform = `translate3d(${-100 * progress}%, 0, 0) scale(${(-0.5 * progress) + 1})`;
      }
    });
    main.showMain();
  }
}
const intro = new Intro();
// document.addEventListener('DOMContentLoaded', intro.init);
// Ìó§Îçî
class Header {
  constructor() {
    // Î©îÎâ¥ ÌÅ¥Î¶≠Ïãú Î©îÎâ¥ ÌôîÎ©¥ Îì±Ïû•
    this.$menu = document.querySelector('.header-menu');
    this.$menu.onclick = this.click.bind(this);
    this.$lines = document.querySelectorAll('.header-line');
    this.$menuBack = document.getElementById('white');
    this.$menuText = document.getElementById('text');
    this.$broswerWidth = document.documentElement.clientWidth;
    this._X = null;
    // Í∏ÄÏûê Î©îÎâ¥ Ìò∏Î≤ÑÌö®Í≥º
    this.$navs = document.querySelectorAll('.nav');
    [...this.$navs].forEach(item => {
      item.onpointerenter = this.navIn.bind(this);
    });
  }
  navIn(e) {
    const target = e.currentTarget;
    const circle = target.querySelector('.nav-circle');
    const text = target.querySelector('.nav-text');  
    circle.classList.add('pointer');
    text.classList.add('pointer');
    target.onpointerleave = () => {
      circle.classList.remove('pointer');
      text.classList.remove('pointer');  
    }
  }
  click() {
    // ÏÇºÏßÄÏ∞ΩÏóêÏÑú XÏûêÎ°ú, XÏûêÏóêÏÑú ÏÇºÏßÄÏ∞ΩÏúºÎ°ú
    for(let line of this.$lines) {
      line.classList.toggle('clicked');
    }
    // Î©îÎâ¥ Îì±Ïû•
    this.$menuBack.classList.toggle('show');
    this.$menuText.classList.toggle('show');
    if(this.$menuBack.classList.contains('show')) {
      this._X = true; // ÏÇºÏßÄÏ∞ΩÏù¥ Îêú ÏÉÅÌÉú
    } else {
      this._X = false; // Îã§Ïãú ÏõêÎûò ÏÉÅÌÉúÎ°ú, Î©îÎâ¥Í∞Ä Ïïà Î≥¥Ïù¥Îäî ÏÉÅÌÉúÎ°ú ÎèåÏïÑÍ∞ÄÏûê
    }
    if(this._X) {
      // Ïä§ÌÅ¨Î°§Î∞î ÏÇ¨ÎùºÏßê
      document.body.style.overflow = 'hidden';
      // Ïä§ÌÅ¨Î°§Î∞î ÏÇ¨ÎùºÏßÄÎ©¥ÏÑú ÎÑàÎπÑÍ∞Ä ÎÑìÏñ¥ÏßÄÎãàÍπå Í∑∏ÎßåÌÅº Ìå®Îî©ÏúºÎ°ú Ï±ÑÏõåÏïº ÌïúÎã§. 
      // ÌòÑÏû¨ ÎÑìÏñ¥ÏßÑ ÎÑàÎπÑÏóêÏÑú Ï≤òÏùå Ïä§ÌÅ¨Î°§Î∞î ÏûàÏùÑÎïå Ï†ÄÏû•Ìïú ÎÑàÎπÑÎ•º ÎπºÏÑú Ïò§Î•∏Ï™Ω Ìå®Îî©ÏúºÎ°ú Ï∂îÍ∞ÄÌïòÍ∏∞
      document.body.style.paddingRight = (document.documentElement.clientWidth - this.$broswerWidth) + 'px';
      this.$menuText.style.paddingRight = (document.documentElement.clientWidth - this.$broswerWidth) + 'px';
    } else {
      document.body.style.overflow = '';
      document.body.style.paddingRight = '';
      this.$menuText.style.paddingRight = '';
    }
  }
}
new Header();
// Î©îÏù∏
class Main {
  constructor() {
    this.$main = document.getElementById('main');
    // Ìà¥ÌåÅ
    this.$btns = document.querySelectorAll('.main-btn');
    [...this.$btns].forEach(item => {
      item.onpointerenter = this.tooltip.bind(this);
    })
    // this.$tooltip = null;
    // Ïä§ÌÅ¨Î°§ÌÖçÏä§Ìä∏ Ìò∏Î≤Ñ Ìö®Í≥º
    this.$scroll = document.querySelector('.main-scroll');
    this.$scroll.onpointerenter = this.scroll.bind(this);
    this.$scrollBack = document.querySelector('.main-circle-back');
    this.$scrollCircle = document.querySelector('.main-circle-arrow');
    // ÌÅ¥Î¶≠Ïãú Ïä§ÌÅ¨Î°§ Îã§Ïö¥
    this.$scroll.onclick = this.scrollDown.bind(this);
    this.$release = document.getElementById('release');


    this.$mainImgArea = document.querySelector('.main-img-area');
    this.$mainImgBoxes = Array.from(document.querySelectorAll('.main-img-box'));
    this.$title = document.querySelector('.main-title');
    this.$sub = document.querySelector('.main-sub');
    this.$mainCurrentNum = document.querySelector('.main-current');
    this.$mainProgress = document.querySelector('.main-stick-fill');
    this.mainStackIndex = 14;
    this._translate = `translate(-50%, -50%)`;
    this._scale = [
    'scale(0.5)', 'scale(0.55)', 'scale(0.6)', 'scale(0.65)', 'scale(0.7)',
    'scale(0.75)', 'scale(0.8)', 'scale(0.85)', 'scale(0.9)', 'scale(0.95)',
    'scale(1)', 'scale(1)', 'scale(1)', 'scale(1)', 'scale(1)',
    ];
    this._rotate = ['rotate(-3deg)', 'rotate(4deg)', 'rotate(-7deg)', 'rotate(5deg)', 'rotate(0deg)',
    ];
    this._slide = 14;
    this._sub = [
      "PRODUCT DESIGN",
      "Q+A",
      "BEHIND THE SCENES",
      "BEHIND THE SCENES",
      "PRODUCT DESIGN",
      "DESIGN OPS",
      "BEHIND THE SCENES",
      "PRODUCT DESIGN",
      "PRODUCT DESIGN",
      "BEHIND THE SCENES",
      "DESIGN SYSTEMS",
      "METHODS",
      "BEHIND THE SCENES",
      "Q+A",
      "BEHIND THE SCENES",
    ];
    this._main = [
      `Beyond "Good Job": How to Give Impactful Feedback`,
      "Ask Spotify Design 06",
      "How to Stand Out as a Spotify Internship Applicant",
      "A Designer's Balancing Act: Staying Creative and Organized in Figma",
      "Finding your T-Shape as a Generalist Designer",
      "Growing, Scaling, and Tuning: Meet Spotify‚Äôs Global Head of Design Ops",
      "Backstage Tickets to the World of Service Design at Spotify",
      "Finding your T-Shape as a Specialist Designer",
      "Designing for the World: An Introduction to Localization",
      "From Web Page to Web Player: How Spotify Designed a New Homepage Experience",
      "Can I get an Encore? Spotify‚Äôs Design System, Three Years On",
      "Navigating the Discovery Phase",
      "Making Moves: Designing Motion for 2022 Wrapped",
      "Ask Spotify Design 07",
      "Collaboration Secrets: Design X Engineering",
    ];
    this._backColor = [
      "#ffbc4a", "#ffd0d5", "#ffd0d5", "#ffd0d5", "#ffbc4a",
      "#ffbc4a", "#ffd0d5", "#ffbc4a", "#ffbc4a", "#ffd0d5",
      "#ffbc4a", "#a5c9d8", "#ffd0d5", "#ffd0d5", "#ffd0d5"
    ];

    this.$header = document.getElementById('header');
    this.$headerCategories = document.querySelectorAll('.header__categories__category');

    this.$mainNextBtn = document.querySelector('.btn-next');
    this.$mainPrevBtn = document.querySelector('.btn-prev');
    this.$mainShuffleBtn = document.querySelector('.btn-shuffle');
    this.autoTimeout = null;
    this.randomArr = [];
    this.temTitleArr = [];
    this.temSubtitleArr = [];
    this.temBackcolorArr = [];
    this.mouseTarget = null;
    this.shiftX = null;
    this.rectX = null;
    this.ratio = null;
    this.browserWidth = null;
    this.direction = null;

    this.showCards = this.showCards.bind(this);
    this.autoSlide = this.autoSlide.bind(this);
    this.makeRandom = this.makeRandom.bind(this);
    this.arrangeShuffle = this.arrangeShuffle.bind(this);
    this.dragAndDrop = this.dragAndDrop.bind(this);
    this.moveAt = this.moveAt.bind(this);
    this.pointerMove = this.pointerMove.bind(this);
    this.pointerUp = this.pointerUp.bind(this);
    this.forPointerUp = this.forPointerUp.bind(this);

    this.$mainPrevBtn.onclick = this.clickMainPrevBtn.bind(this);
    this.$mainNextBtn.onclick = this.clickMainNextBtn.bind(this);
    this.$mainShuffleBtn.onclick = this.clickMainShuffleBtn.bind(this);
    this.$mainImgBoxes.forEach(boxes => {
      boxes.onpointerdown = this.dragAndDrop;
    })
  }
  animate({timing, draw, duration}) {
    let start = performance.now();
    requestAnimationFrame(function animate(time) {
      let timeFraction = (time - start) / duration;
      if (timeFraction > 1) timeFraction = 1;
      let progress = timing(timeFraction)
      draw(progress); 
      if (timeFraction < 1) {
        requestAnimationFrame(animate);
      }
    });
  }
  // Î©îÏù∏ Îì±Ïû•
  showMain() {
    this.$main.style.visibility = 'visible';
    // üìç Ïä¨ÎùºÏù¥Îìú Ïπ¥Îìú Îì±Ïû•
    this.showCards();
  }  
  // Ìà¥ÌåÅ Ìò∏Î≤Ñ Ìö®Í≥º
  tooltip(e) {
    const target = e.currentTarget;
    const tooltip = target.querySelector('.main-tooltip');
    tooltip.classList.add('show');
    target.onpointerleave = () => {
      tooltip.classList.remove('show');
    }
  }
  // Ïä§ÌÅ¨Î°§ Ïõê Ìö®Í≥º
  scroll(e) {
    const target = e.currentTarget;
    this.$scrollBack.classList.add('show');
    this.$scrollCircle.classList.add('show');
    target.onpointerleave = () => {
      this.$scrollBack.classList.remove('show');
      this.$scrollCircle.classList.remove('show');  
    }
  }
  // Ïä§ÌÅ¨Î°§ ÌÅ¥Î¶≠Ïãú
  scrollDown() {
    const start = window.pageYOffset;
    const end = this.$release.getBoundingClientRect().top + start;
    this.animate({
      duration: 200,
      timing: function linear(timeFraction) {
        return timeFraction;
      },
      draw: (progress) => {
        if(progress <= 0) return;
        window.scrollTo(0, start + (end - start) * progress);
      }
    });    
  }


  async showCards() {
    if(this._slide === 14) {
      this.$mainPrevBtn.classList.add('deactivated');
    }
    // Ï≤òÏùåÏóê Îì±Ïû•Ìï†Îïå Î≥¥Ïó¨ÏßÄÎäî ÌÉÄÏù¥ÌãÄÍ≥º ÎÑòÎ≤Ñ
    this.$sub.textContent = this._sub[this._slide];
    this.$title.textContent = this._main[this._slide];
    this.$mainCurrentNum.textContent = `01`;

    let intervalId = setInterval(() => {
      this.$mainImgBoxes[this.mainStackIndex].style.transform = `${this._translate} ${this._scale[this.mainStackIndex]} ${this._rotate[this.mainStackIndex % 5]}`;
      this.$mainImgBoxes[this.mainStackIndex].style.left = '50%';
      this.mainStackIndex--;

      if(this.mainStackIndex < 0) {
        clearInterval(intervalId);
        // Ìó§Îçî Îì±Ïû•
        this.$header.classList.add('show');
        for(let category of this.$headerCategories) {
          category.classList.add('show');
        }
        // ÎßàÏßÄÎßâ imgBoxÍπåÏßÄ Ï§ëÏïôÏúºÎ°ú Îì§Ïñ¥ÏôîÏùÑÎïå (transition: left 0.4sÎùºÏÑú)
        // ÏûêÎèô Ïä¨ÎùºÏù¥Îìú ÏãúÏûë
        new Promise((resolve) => {
          setTimeout(() => {
            this.autoSlide();
            // Ï≤òÏùåÏóê ÏßÑÌñâ Î∞î ÏãúÏûë => Ïù¥ÌõÑ ÏïåÏïÑÏÑú Î¨¥ÌïúÏúºÎ°ú Ï†ÑÌôò
            if(this._slide === 14) {
              this.$mainProgress.classList.add('progress');
            }
            resolve();
          }, 400);
        });    
      }
    }, 40);
  }

  // üìç ÎßàÏßÄÎßâ 5Ï¥à ÌõÑÏóê Îã§Ïãú Ïä¨ÎùºÏù¥Îìú Ï¥§ÎùºÎùº Ìï¥ÏïºÌïòÎäîÎç∞ Î∞îÎ°ú Ïä¨ÎùºÏù¥Îìú Ï¥§ÎùºÎùº Ìï¥ÏÑú Ïù¥Í±∞ 5Ï¥à ÌõÑ ÏàòÏ†ï,
  // üìç Í∑∏Î¶¨Í≥† Î≤ÑÌäºÏúºÎ°ú ÎàÑÎ•¥Î©¥ ÎßàÏßÄÎßâ Ïä¨ÎùºÏù¥Îìú ÌõÑÏóê ÎπàÍ≥µÍ∞Ñ ÎÇòÌÉÄÎÇú ÌõÑÏóê Ïä¨ÎùºÏù¥Îìú Ï¥§ÎùºÎùº
  // üìç ÏßÑÌñâ Î∞î
  // ÌïëÌÅ¨: 14-12, 9, 6, 3-1
  // Î∏îÎ£®: 11
  // Ïò§Î†åÏßÄ: 10, 8-7, 5-4, 0
  async autoSlide() {
    // ÏàòÎèô Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú 01ÏóêÏÑú ÎπÑÌôúÏÑ±ÌôîÎêú Î≤ÑÌäº Îã§Ïãú ÌôúÏÑ±Ìôî
    if(this.$mainPrevBtn.classList.contains('deactivated') && this._slide === 13) {
      this.$mainPrevBtn.classList.remove('deactivated');
    }
    // mainAutoSlideÎäî 14Î∂ÄÌÑ∞ ÏãúÏûë
    // Î∞îÎ°ú scale, rotate Ï°∞Ï†ï
    this.$mainImgBoxes[this._slide].style.transform = `translate(-50%, -50%) scale(1) rotate(0deg)`;
    // Î∞∞Í≤ΩÌôîÎ©¥ Î≥ÄÍ≤Ω
    this.$main.style.backgroundColor = `${this._backColor[this._slide]}`;
    this.$header.style.backgroundColor = `${this._backColor[this._slide]}`;
    // 5Î≤àÏß∏ Îí§ÏóêÍ∫º scale1Î°ú Ï°∞Ï†ï
    if(this._slide > 4) {
      this.$mainImgBoxes[this._slide - 5].style.transform = `translate(-50%, -50%) scale(1) ${this._rotate[this._slide  % 5]}`;
    } 
    // ÏßÑÌñâ Î∞î Ïà´Ïûê Î∞îÎÄåÎäîÍ±∞
    this.$mainCurrentNum.textContent = (15 - this._slide) < 10 ? `0${(15 - this._slide)}` : `${(15 - this._slide)}`;
    // 5Ï¥àÍ∞Ñ Í∏∞Îã§Î†§
    new Promise((resolve) => {
      this.autoTimeout = setTimeout(() => {
        // Ïù¥ÎØ∏ÏßÄ ÎÇ†Î†§
        if(this._slide > 0) {
          this.$mainImgBoxes[this._slide].style.left = '200%';
          this._slide--;
          this.$sub.textContent = `${this._sub[this._slide]}`;
          this.$title.textContent = `${this._main[this._slide]}`;   
          resolve();
          return this.autoSlide();      
        } else if(this._slide === 0) {
          this.mainStackIndex = 14;
          this._slide = 14;
          // Î∞∞Í≤ΩÌôîÎ©¥ ÏûêÏó∞Ïä§ÎüΩÍ≤å Î≥ÄÍ≤Ω
          this.$main.style.backgroundColor = `${this._backColor[this._slide]}`;
          this.$header.style.backgroundColor = `${this._backColor[this._slide]}`;
          this.$mainProgress.classList.remove('progress');
          resolve();
          return this.showCards();
        }
      }, 5000);
    });
  }

  // üìç ÏàòÎèôÍ≥º ÏûêÎèô ÎØπÏä§ Ïñ¥ÎñªÍ≤å?
  // üìç Í∏∞Ï°¥Ïóê ÏûêÎèôÏóêÏÑú ÏßÑÌñâÎêòÎçò ÌÉÄÏù¥Î®∏Î•º Ï∑®ÏÜåÌïòÍ≥† ÏÉàÎ°≠Í≤å ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ïÌï¥Ïïº ÌïúÎã§. 
  clickMainPrevBtn() {
    if(this._slide >= 14) return;
    clearTimeout(this.autoTimeout);

    if(this._slide === 13) {
      // Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
      this.$mainPrevBtn.classList.add('deactivated');
    }

    // ÏßÄÎÇòÍ∞Ñ Ïä¨ÎùºÏù¥Îìú Îã§Ïãú ÎèåÏïÑÏôÄ
    this.$mainImgBoxes[this._slide + 1].style.left = '50%';
    // ÎèôÏãúÏóê ÌòÑÏû¨ Ïä¨ÎùºÏù¥Îìú rotate Î≥ÄÌôîÌïòÍ≥† Îí§ÏóêÏÑú 5Î≤àÏß∏ Îã§Ïãú scaleÏ°∞Ï†ï
    this.$mainImgBoxes[this._slide].style.transform = `translate(-50%, -50%) scale(1) ${this._rotate[this._slide % 5]}`;
    // Îã§Ïãú ÏïàÎ≥¥Ïù¥Í≤å Îêå
    if(this._slide > 4) {
      this.$mainImgBoxes[this._slide - 5].style.transform = `translate(-50%, -50%) ${this._scale[this._slide]} ${this._rotate[this._slide  % 5]}`;
    } 
    this._slide++;
    // ÏßÑÌñâ Î∞î Ïà´Ïûê Î∞îÎÄåÎäîÍ±∞
    this.$mainCurrentNum.textContent = (15 - this._slide ) < 10 ? `0${(15 - this._slide)}` : `${(15 - this._slide)}`;
    this.$sub.textContent = `${this._sub[this._slide]}`;
    this.$title.textContent = `${this._main[this._slide]}`;   
    return this.autoSlide();
  }

  clickMainNextBtn() {
    // ÏÇ¨ÏßÑ, ÌÉÄÏù¥ÌãÄ, Ïπ¥Ïö¥Ìä∏ Ïà´Ïûê, Î∞∞Í≤ΩÌôîÎ©¥ Î∞îÍøî
    // Í∏∞Ï°¥Ïùò autoSlide Ï†ïÏßÄ
    clearTimeout(this.autoTimeout);

    if(this._slide > 0) {
      this.$mainImgBoxes[this._slide].style.left = '200%';
      this._slide--;
      this.$sub.textContent = `${this._sub[this._slide]}`;
      this.$title.textContent = `${this._main[this._slide]}`;   
      return this.autoSlide();      
    } else if(this._slide === 0) {
      this.mainStackIndex = 14;
      this._slide = 14;
      // Î∞∞Í≤ΩÌôîÎ©¥ ÏûêÏó∞Ïä§ÎüΩÍ≤å Î≥ÄÍ≤Ω
      this.$main.style.backgroundColor = `${this._backColor[this._slide]}`;
      this.$header.style.backgroundColor = `${this._backColor[this._slide]}`;
      this.$mainProgress.classList.remove('progress');
      return this.showCards();
    }
  }

  async clickMainShuffleBtn() {
    // ÌÉÄÏù¥Î®∏ Ï§ëÏßÄ
    clearTimeout(this.autoTimeout);
    // Ïù¥ÎØ∏ÏßÄ Îã§ ÎÇ†Î¶¨Í≥†
    for(let imgBox of this.$mainImgBoxes) {
      imgBox.style.left = '200%';
    }
    // ÌÉÄÏù¥ÌãÄ Îã§ ÎÇ†Î¶¨Í≥†
    this.$sub.textContent = ``;
    this.$title.textContent = ``;   
    this.$mainProgress.classList.remove('progress');

    this.fragment = null;
    this.randomArr = [];
    this.temTitleArr = [];
    this.temSubtitleArr = [];
    this.temBackcolorArr = [];

    // Îã§Ïãú Ïù¥ÎØ∏ÏßÄ Î∞∞Ïó¥ ÏàúÏÑúÎ•º Îã§ÏãúÌï¥ÏÑú
    // 0Î∂ÄÌÑ∞ 14Ïùò ÎûúÎç§ Ïà´ÏûêÎ•º Í∞ÄÏßÑ length 15Í∞úÏùò Î∞∞Ïó¥
    this.makeRandom();
    // $mainImgBoxes Ïû¨Î∞∞Ïó¥ => Ïã§Ï†ú DOM ÏöîÏÜå Î∞îÍæ∏Í∏∞
    this.arrangeShuffle();
    // Îã§Ïãú Îì±Ïû•, 
    this.mainStackIndex = 14;
    this._slide = 14;
    new Promise(resolve => {
      setTimeout(() => {
        resolve();
        return this.showCards();    
      }, 2500);
    })
  }

  makeRandom() {
    const number = Math.floor(Math.random() * 15);
    if(!this.randomArr.includes(number)) {
      this.randomArr = this.randomArr.concat(number);
    }
    if(this.randomArr.length === 15) {
      return;
    } else {
      this.makeRandom();
    }
  }

  arrangeShuffle() {
    this.fragment = new DocumentFragment();
    // DOMÏû¨Î∞∞Ïπò, ÌÉÄÏù¥ÌãÄ Ïû¨Î∞∞Ïπò
    for(let randomNum of this.randomArr) {
      this.fragment.append(this.$mainImgBoxes[randomNum]);
      this.temTitleArr.push(this._main[randomNum]);
      this.temSubtitleArr.push(this._sub[randomNum]);
      this.temBackcolorArr.push(this._backColor[randomNum]);
    }
    for(let currentElem of this.$mainImgArea.children) {
      currentElem.remove();
    }
    this.$mainImgArea.append(this.fragment);
    this.$mainImgBoxes = Array.from(document.querySelectorAll('.main__imgs__image-box'));    
    this._main = [...this.temTitleArr];
    this._sub = [...this.temSubtitleArr];
    this._backColor = [...this.temBackcolorArr];
  }

  // üìç ÎìúÎûòÍ∑∏ Ïù¥Î≤§Ìä∏
  dragAndDrop(e) {
    clearTimeout(this.autoTimeout);
    this.$mainProgress.classList.remove('progress');

    this.mouseTarget = e.currentTarget;
    this.mouseTarget.style.transform = `translate(-50%, -50%) scale(1.1) rotate(0deg)`;
    this.mouseTarget.style.transition = `left 0.1s ease-out, transform 0.3s ease-out`;
    this.mouseTarget.style.cursor = `grabbing`;
    this.mouseTarget.style.zIndex = `1000`;
    this.rectX = this.mouseTarget.getBoundingClientRect().left;
    this.shiftX = e.clientX - this.rectX;

    this.moveAt(e.clientX);
    
    document.addEventListener('pointermove', this.pointerMove);
    this.mouseTarget.addEventListener('pointerup', this.pointerUp);
    this.mouseTarget.addEventListener('dragstart', (e) => {
      e.preventDefault();
    });
  }

  moveAt(clientX) {
    this.mouseTarget.style.left = `calc(50% + ${clientX - this.shiftX - this.rectX}px)`;
  }

  pointerMove(e) {
    this.moveAt(e.clientX);
  }

  pointerUp(e) {
    this.browserWidth = document.documentElement.clientWidth;
    // Ïò§Î•∏Ï™ΩÏúºÎ°ú ÏõÄÏßÅÏùºÎïåÏôÄ ÏôºÏ™ΩÏúºÎ°ú ÏõÄÏßÅÏùºÎïå
    // Ïò§Î•∏Ï™ΩÏùÄ ${clientX - this.shiftX - this.rectX}Ïùò Í∞íÏù¥ ÏñëÏàòÏùºÎïå
    // ÏôºÏ™ΩÏùÄ ${clientX - this.shiftX - this.rectX}Ïùò Í∞íÏù¥ ÏùåÏàòÏùºÎïå
    // Ïò§Î•∏Ï™ΩÏùÄ (right - Î∏åÎùºÏö∞Ï†Ä ÎÑàÎπÑ) / Î∏åÎùºÏö∞Ï†Ä ÎÑàÎπÑÍ∞Ä 0.3Ïù¥ÏÉÅÏùºÎïå
    // ÏôºÏ™ΩÏùÄ (ÏöîÏÜå ÎÑàÎπÑ - right) / Î∏åÎùºÏö∞Ï†Ä ÎÑàÎπÑÍ∞Ä 0.3Ïù¥ÏÉÅÏùºÎïå
    if(e.clientX - this.shiftX - this.rectX > 0) {
      // Ïò§Î•∏Ï™Ω
      this.ratio = (this.mouseTarget.getBoundingClientRect().right - this.browserWidth) / this.browserWidth;
      this.direction = 'right';
    } else if(e.clientX - this.shiftX - this.rectX < 0) {
      // ÏôºÏ™Ω
      this.ratio = (this.mouseTarget.getBoundingClientRect().width - this.mouseTarget.getBoundingClientRect().right) / this.browserWidth;
      this.direction = 'left';
    }

    // Î∏åÎùºÏö∞Ï†Ä ÎÑàÎπÑÎ≥ÑÎ°ú Îã§Î•¥Í≤å
    if(this.browserWidth < 600) {
      this.forPointerUp(0.2);
    } else if(this.browserWidth >= 600 && this.browserWidth < 1024) {
      this.forPointerUp(0.05);
    } else if(this.browserWidth >= 1024) {
      switch(this.direction) {
        case 'right':
          this.forPointerUp(0.1);
          break;
        case 'left': 
          this.forPointerUp(-0.35);
          break;
      }
    } 

    this.mouseTarget.style.transform = `translate(-50%, -50%) scale(1) rotate(0deg)`;
    this.mouseTarget.style.transition = `left 0.4s ease-out, transform 0.3s ease-out`;
    this.mouseTarget.style.cursor = ``;
    this.mouseTarget.style.zIndex = ``;  
    this.$mainProgress.classList.add('progress');

    document.removeEventListener('pointermove', this.pointerMove);
    this.mouseTarget.removeEventListener('pointerup', this.pointerUp);
  }

  forPointerUp(RATIO) {
    if(this.ratio >= RATIO) {
      // ÎÑòÍ≤®
      if(this._slide > 0) {
        this.$mainImgBoxes[this._slide].style.left = '200%';
        this._slide--;
        this.$sub.textContent = `${this._sub[this._slide]}`;
        this.$title.textContent = `${this._main[this._slide]}`;   
        this.autoSlide();      
      } else if(this._slide === 0) {
        this.mainStackIndex = 14;
        this._slide = 14;
        // Î∞∞Í≤ΩÌôîÎ©¥ ÏûêÏó∞Ïä§ÎüΩÍ≤å Î≥ÄÍ≤Ω
        this.$main.style.backgroundColor = `${this._backColor[this._slide]}`;
        this.$header.style.backgroundColor = `${this._backColor[this._slide]}`;
        this.$mainProgress.classList.remove('progress');
        this.showCards();
      }
    } else {
      this.mouseTarget.style.left = `50%`;
      this.autoSlide();
    }
  }
}

const main = new Main();
main.showMain();
// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Events
// üìç Ïôú Ïñ¥Îñ§Í±¥ pointeroverÍ∞Ä Ïïà ÎêòÍ≥† Ïñ¥Îñ§ Í±¥ pointeroverÍ∞Ä ÎêòÎäîÏßÄ?

class Events {
  constructor() {
    this.$menuBackground = document.getElementById('menuBackground');
    this.$menuContents = document.getElementById('menuContents');
    this.$headerMenuLines = document.querySelectorAll('.header__menu__line');
    this.documentClientWidth = document.documentElement.clientWidth;

    this.$headerCateText = null;
    this.$headerCateCircle = null;
    this.$headerCategories = document.querySelectorAll('.header__categories__category');

    this.$mainScrollBackground = document.querySelector('.main__bar__scroll__circle__background');
    this.$mainScrollArrow = document.querySelector('.main__bar__scroll__circle__arrow');
    this.mainScrollStart = null;
    this.mainScrollEnd = null;
    // this.$mainTooltip = null;
    this.$release = document.getElementById('release');

    this.$releaseTitle = null;
    this.$releasePlay = null;

    this.$spotlightInner = document.querySelector('.spotlight__contents__inner');
    this.$spotlightItems = Array.from(document.querySelectorAll('.spotlight__contents__item'));
    this.$spotlightImgBoxImges = Array.from(document.querySelectorAll('.spotlight__contents__item__img-box__img'));
    this.$spotCursor = document.getElementById('spotlightCursor');
    this.$spotCursorLeft = document.querySelector('.spotcursorLeft');
    this.$spotCursorRight = document.querySelector('.spotcursorRight');
    this.spotInnerLeft = null;
    this.firstInnerLeft = document.querySelector('.spotlight__contents__inner').getBoundingClientRect().left;
    this.currentSpotItem = 0;
    this.currentSpotFlower = null;
    this.currentSpotTarget = null;
    this.currentSpotRead = null;
    this.spotRatio = null;
    this.spotZindex = null;

    this.$jobsArrow = document.querySelector('.jobs__arrow');
    this.$jobsEditorial = document.querySelector('.jobs__editorial');

    this.$footerScollBack = document.querySelector('.footer__scroll__contents__arrow__background');
    this.$footerScrollArrow = document.querySelector('.footer__scroll__contents__arrow__img');
    this.footerScrollStart = null;

    this.spotlightPointerMove = this.spotlightPointerMove.bind(this);
    this.spotlightPointerUp = this.spotlightPointerUp.bind(this);  
    this.spotKeydown = this.spotKeydown.bind(this);
    this.spotFlower = this.spotFlower.bind(this);
    this.leaveSpotFlower = this.leaveSpotFlower.bind(this);
    this.spotCursor = this.spotCursor.bind(this);
    this.spotCursorMoveAt = this.spotCursorMoveAt.bind(this);
    this.spotCursorMove = this.spotCursorMove.bind(this);
    this.spotCursorOut = this.spotCursorOut.bind(this);
    this.spotCursorDown = this.spotCursorDown.bind(this);
    this.jobs = this.jobs.bind(this);

    this.$spotlightImgBoxImges.forEach(item => {
      item.addEventListener('pointerover', this.spotFlower);
    });
  }

  animate({timing, draw, duration}) {
    let start = performance.now();
    requestAnimationFrame(function animate(time) {
      let timeFraction = (time - start) / duration;
      if (timeFraction > 1) timeFraction = 1;
      let progress = timing(timeFraction)
      draw(progress); 
      if (timeFraction < 1) {
        requestAnimationFrame(animate);
      }
    });
  }

  handleEvent(event) {
    const EVENT_TYPE = event.type;
    if(EVENT_TYPE === 'resize') {
      this.resize(event);
      return;
    }
    const target = event.target.closest(`[data-${EVENT_TYPE}]`);
    if(!target) return;
    const method = target.dataset[EVENT_TYPE];
    // this[method](event, target);
  }

  headerHover(e, target) {
    if(e.type === 'pointerover') {
      this.$headerCateText = target.querySelector('.header__categories__category__text');
      this.$headerCateCircle = target.querySelector('.header__categories__category__circle');
      this.$headerCateText.classList.add('overed');
      this.$headerCateCircle.classList.add('overed');
    } else if(e.type === 'pointerout') {
      this.$headerCateText.classList.remove('overed');
      this.$headerCateCircle.classList.remove('overed');
    }
  }

  resize(e) {
    this.documentClientWidth = document.documentElement.clientWidth;
    if(document.documentElement.clientWidth >= 600) {
      this.$menuBackground.classList.remove('clicked');
      this.$menuContents.classList.remove('clicked');
      document.body.classList.remove('hidden');
      for(let line of this.$headerMenuLines) {
        line.classList.remove('clicked');
      }    
      for(let category of this.$headerCategories) {
        category.classList.add('show');
      }
      document.body.style.paddingRight = '';
      this.$menuContents.style.paddingRight = '';
    }
    // spotlightÏóêÏÑú ÌòÑÏû¨Ïùò ÏöîÏÜåÍ∞Ä Í∞ÄÏû• ÏïûÏóê Ïò§Í≤å Ï°∞Ï†ï
    this.spotInnerLeft = this.$spotlightInner.getBoundingClientRect().left;
    this.$spotlightInner.style.marginLeft = `-${this.$spotlightItems[this.currentSpotItem].getBoundingClientRect().left - this.spotInnerLeft}px`;
    this.firstInnerLeft = document.querySelector('.spotlight__contents__inner').getBoundingClientRect().left;
  }

  releaseBox(e, target) {
    this.$releaseTitle = target.querySelector('.release__contents__box__title');
    if(target.querySelector('.release__contents__box__play-btn')) {
      this.$releasePlay = target.querySelector('.release__contents__box__play-btn');
    }
    if(e.type === 'pointerover') {
      this.$releaseTitle.classList.add('overed');
      if(this.$releasePlay) {
        this.$releasePlay.classList.add('overed');
      }
    } else if(e.type === 'pointerout') {
      this.$releaseTitle.classList.remove('overed');
      if(this.$releasePlay) {
        this.$releasePlay.classList.remove('overed');
        this.$releasePlay = null;
      }
    }
  }
  // üìç ÌÅ¥Î¶≠ÎïåÎßàÎã§ ÏõêÏ†êÏúºÎ°ú Í∞ÄÎäî Í±∞ Í≥†ÏπòÍ≥†, ÌÇ§Î≥¥ÎìúÏôÄ Ïó∞Í≥ÑÌï¥ÏÑú Ïù¥Ïñ¥Ïßà Ïàò ÏûàÎèÑÎ°ù
  /*
  spotShiftXÎäî ÎßàÏö∞Ïä§ Ïª§ÏÑúÏôÄ spotlightInnerÏùò ÏôºÏ™Ω Î™®ÏÑúÎ¶¨ ÏÇ¨Ïù¥
  spotShiftXÍ∞Ä ÎèôÏùºÌïòÍ≤å ÏõÄÏßÅÏó¨Ïïº ÌïúÎã§.
  */
  spotlight(e, target) {
    this.spotInnerLeft = this.$spotlightInner.getBoundingClientRect().left;
    this.spotShiftX = e.clientX - this.spotInnerLeft;
    this.$spotlightInner.style.transition = 'none';
    // Î∞©Ìñ•ÏùÑ ÏïåÍ∏∞ ÏúÑÌïú Ìè¨Ïù∏Ìä∏
    this.firstClientX = e.clientX;

    this.spotlightMoveAt(e.clientX);

    this.$spotlightInner.addEventListener('pointermove', this.spotlightPointerMove);
    this.$spotlightInner.addEventListener('pointerup', this.spotlightPointerUp);
    this.$spotlightInner.addEventListener('dragstart', (e) => {
      e.preventDefault();
    });
  }

  spotlightMoveAt(clientX) {
    this.$spotlightInner.style.marginLeft = -(this.spotShiftX  - clientX + this.firstInnerLeft) + 'px';
  }

  spotlightPointerMove(e) {
    this.spotlightMoveAt(e.clientX);
  }

  // Î∞©Ìñ• Íµ¨Î∂Ñ, Ïñë ÎÅùÎã®ÏóêÏÑú Ïù¥Î≤§Ìä∏ Î™ªÌïòÍ≤å
  spotlightPointerUp(e) {
    this.spotInnerLeft = this.$spotlightInner.getBoundingClientRect().left;
    // ÏñëÏàòÎ©¥ ÏôºÏ™ΩÏúºÎ°ú ÎìúÎûòÍ∑∏, ÏùåÏàòÎ©¥ Ïò§Î•∏Ï™ΩÏúºÎ°ú ÎìúÎûòÍ∑∏
    if(this.firstClientX - e.clientX > 0) {
      this.spotRatio = this.$spotlightItems[this.currentSpotItem].getBoundingClientRect().right / this.$spotlightItems[this.currentSpotItem].getBoundingClientRect().width;
      if(this.spotRatio <= 0.5) {
        // Îã§Ïùå ÏöîÏÜåÎ°ú Ïù¥Îèô
        this.currentSpotItem++;
        this.$spotlightInner.style.marginLeft = `-${this.$spotlightItems[this.currentSpotItem].getBoundingClientRect().left - this.spotInnerLeft}px`;
      } else {
        // ÏõêÎûò ÏúÑÏπòÎ°ú
        this.$spotlightInner.style.marginLeft = this.$spotlightInner.getBoundingClientRect().left + -this.$spotlightItems[this.currentSpotItem].getBoundingClientRect().left + 'px';
      }  
    } else if(this.firstClientX - e.clientX < 0){
      // Î∞©Ìñ•Ïù¥ Ïò§Î•∏Ï™ΩÏúºÎ°ú ÎìúÎûòÍ∑∏Ïù¥Î©¥
      this.spotRatio = this.$spotlightItems[this.currentSpotItem - 1].getBoundingClientRect().right / this.$spotlightItems[this.currentSpotItem].getBoundingClientRect().width;
      if(this.spotRatio >= 0.5) {
        this.currentSpotItem--;
        this.$spotlightInner.style.marginLeft = `-${this.$spotlightItems[this.currentSpotItem].getBoundingClientRect().left - this.spotInnerLeft}px`;
      } else {
        this.$spotlightInner.style.marginLeft = this.$spotlightInner.getBoundingClientRect().left + -this.$spotlightItems[this.currentSpotItem].getBoundingClientRect().left + 'px';
      }
    }
    this.$spotlightInner.style.transition = '';
    this.$spotlightInner.removeEventListener('pointermove', this.spotlightPointerMove);
    this.$spotlightInner.removeEventListener('pointerup', this.spotlightPointerUp);

    this.$spotCursor.classList.remove('downed');
    this.$spotCursorLeft.classList.remove('none');
    this.$spotCursorRight.classList.remove('none');

    this.spotCursorMoveAt(e.clientX, e.clientY);
    this.$spotlightInner.removeEventListener('pointerdown', this.spotCursorDown);
  }

  spotKeydown(e) {
    // 17..5 , -286.5, -519.5... Ïùò Î≥ÄÌôî
    this.spotInnerLeft = this.$spotlightInner.getBoundingClientRect().left;
    if(e.key == 'ArrowRight') {
      if(this.currentSpotItem >= 11) return;
      this.currentSpotItem++;
      this.$spotlightInner.style.marginLeft = `-${this.$spotlightItems[this.currentSpotItem].getBoundingClientRect().left - this.spotInnerLeft}px`;
    } else if(e.key == 'ArrowLeft') {
      if(this.currentSpotItem === 0) return;
      this.currentSpotItem--;
      this.$spotlightInner.style.marginLeft = `${-this.$spotlightItems[this.currentSpotItem].getBoundingClientRect().left + this.spotInnerLeft}px`;
    }
  }

  // üìç ÍΩÉ svgÍ∞Ä ÏôºÏ™ΩÏùò Ïù¥ÎØ∏ÏßÄÎ•º Í∞ÄÎ¶¨ÎäîÍ±∞ => ÌÉÄÏù¥ÌãÄ Í∞ÄÎ¶¨ÎäîÍ±∞
  // üìç enterÍ≥º overÏùò Ï∞®Ïù¥, enterÎäî Ïûò ÏïàÎêòÎäî Í≤ΩÏö∞
  spotFlower(e) {
    if(e.target.className !== 'spotlight__contents__item__img-box__img') return;
    if(this.currentSpotFlower) return;
    this.currentSpotTarget = e.target;
    this.currentSpotRead = this.currentSpotTarget.nextElementSibling;
    this.spotZindex = this.currentSpotTarget.closest('.spotlight__contents__item');
    this.spotZindex.style.zIndex = '0';
    this.currentSpotFlower = this.currentSpotTarget.parentNode.querySelector('.spotlight__contents__item__img-box__svg');
    this.currentSpotFlower.classList.add('bloom');
    this.currentSpotRead.classList.add('show');
    for(let child of this.currentSpotRead.children) {
      child.classList.add('show');
    }
    // ÎßàÏö∞Ïä§ Ïª§ÏÑú Î™®Ïñë Î≥ÄÌòï
    this.$spotCursor.classList.add('overed');
    this.$spotCursor.style.left = e.clientX - (this.$spotCursor.getBoundingClientRect().width / 2) + 'px';
    this.$spotCursor.style.top = e.clientY - (this.$spotCursor.getBoundingClientRect().height / 2) + 'px';
    this.currentSpotTarget.addEventListener('pointerout', this.leaveSpotFlower);
  }

  leaveSpotFlower(e) {
    this.spotZindex.style.zIndex = '';
    this.currentSpotFlower.classList.remove('bloom');
    this.currentSpotRead.classList.remove('show');
    for(let child of this.currentSpotRead.children) {
      child.classList.remove('show');
    }
    this.$spotCursor.classList.remove('overed');
    this.currentSpotTarget.removeEventListener('pointerout', this.leaveSpotFlower);
    this.currentSpotFlower = null;
  }

  spotCursor(e) {
    // ÏôÑÏ†ÑÏ≤¥Î°ú Îì±Ïû•
    this.$spotCursor.style.display = 'flex';

    this.spotCursorMoveAt(e.clientX, e.clientY);

    this.$spotlightInner.addEventListener('pointerdown', this.spotCursorDown);
    this.$spotlightInner.addEventListener('pointermove', this.spotCursorMove);
    this.$spotlightInner.addEventListener('pointerout', this.spotCursorOut);
  }

  spotCursorMoveAt(clientX, clientY) {
    this.$spotCursor.style.left = clientX - (this.$spotCursor.getBoundingClientRect().width / 2) + 'px';
    this.$spotCursor.style.top = clientY - (this.$spotCursor.getBoundingClientRect().height / 2) + 'px';
  }

  spotCursorMove(e) {
    this.spotCursorMoveAt(e.clientX, e.clientY);
  }

  spotCursorOut() {
    this.$spotCursor.style.display = 'none';
  }

  spotCursorDown(e) {
    this.$spotCursor.classList.add('downed');
    this.$spotCursorLeft.classList.add('none');
    this.$spotCursorRight.classList.add('none');

    this.spotCursorMoveAt(e.clientX, e.clientY);
    this.$spotlightInner.addEventListener('pointerup', this.spotCursorUp);
  }

  jobs(e) {
    if(e.type === 'pointerover') {
      this.$jobsArrow.classList.add('show');
      this.$jobsEditorial.classList.add('show');
    } else if(e.type === 'pointerout') {
      this.$jobsArrow.classList.remove('show');
      this.$jobsEditorial.classList.remove('show');
    }
  }

  backToTop(e, target) {
    if(e.type === 'pointerover') {
      this.$footerScollBack.classList.add('overed');
      this.$footerScrollArrow.classList.add('overed');
    } else if(e.type === 'pointerout') {
      this.$footerScollBack.classList.remove('overed');
      this.$footerScrollArrow.classList.remove('overed');
    } else if(e.type === 'click') {
      this.footerScrollStart = window.pageYOffset;

      this.animate({
        duration: 400,
        timing: function quad(timeFraction) {
          return Math.pow(timeFraction, 2)
        },
        draw: (progress) => {
          if(progress <= 0) return;
          window.scrollTo(0, this.footerScrollStart * (1 - progress));
        }    
      });
    }
  }
}

const events = new Events();
// document.addEventListener('click', events);
// document.addEventListener('pointerover', events);
// document.addEventListener('pointerout', events);
// document.addEventListener('pointerdown', events);
// document.addEventListener('keydown', events.spotKeydown);
// window.addEventListener('resize', events);

class InboxScroll {
  constructor() {
    this.$inbox = document.getElementById('inbox');
    this.$inboxSvgCircle1 = document.querySelector('.inbox__svg__circle__path1');
    this.$inboxSvgCircle2 = document.querySelector('.inbox__svg__circle__path2');
    this.$inboxSvgArrowHead = document.querySelector('.inbox__svg__arrow__head');
    this.$inboxSvgArrowBody = document.querySelector('.inbox__svg__arrow__body');
    this.circle1Length = this.$inboxSvgCircle1.getTotalLength(); // 245
    this.circle2Length = this.$inboxSvgCircle2.getTotalLength(); // 295
    this.headLength = this.$inboxSvgArrowHead.getTotalLength(); // 49
    this.bodyLength = this.$inboxSvgArrowBody.getTotalLength(); // 196
    this.ratio = null;

    this.inbox = this.inbox.bind(this);
  }

  inbox(e) {
    this.ratio = (window.pageYOffset + document.documentElement.clientHeight - this.$inbox.offsetTop) / this.$inbox.offsetHeight;
    if(this.ratio >= 0.43 && this.ratio < 1.8) {
      this.$inboxSvgCircle1.classList.add('show');
      this.$inboxSvgCircle2.classList.add('show');
      this.$inboxSvgArrowHead.classList.add('show');
      this.$inboxSvgArrowBody.classList.add('show');
    } else if(this.ratio >= 1.8 || this.ratio < 0.43) {
      this.$inboxSvgCircle1.classList.remove('show');
      this.$inboxSvgCircle2.classList.remove('show');
      this.$inboxSvgArrowHead.classList.remove('show');
      this.$inboxSvgArrowBody.classList.remove('show');
    }
  }
}

const inboxScroll = new InboxScroll();
window.addEventListener('scroll', inboxScroll.inbox);

class Time {
  constructor() {
    this.$hours = document.querySelectorAll('.time__clock__hour');
    this.$minutes = document.querySelectorAll('.time__clock__minute');
    this.$seconds = document.querySelectorAll('.time__clock__second');
  }

  init(string, timezone, index) {
    const date = new Date().toLocaleString(string, {
      timeZone: timezone,
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric',
      hour12: false,
    });
    
    const timeComponents = date.split(':');

    let hour = parseInt(timeComponents[0]);
    if(hour < 10) hour = '0' + hour;
    this.$hours[index].innerHTML = hour;

    let minute = parseInt(timeComponents[1]);
    if(minute < 10) minute = '0' + minute;
    this.$minutes[index].innerHTML = minute;

    let second = parseInt(timeComponents[2]);
    if(second < 10) second = '0' + second;
    this.$seconds[index].innerHTML = second;
  }

  time() {
    this.init('en-US', 'Europe/Stockholm', 0);
    this.init('en-GB', 'Europe/London', 1);
    this.init('en-US', 'America/New_York', 2);
  }
}

const time = new Time();
time.time();
setInterval(() => {
  time.time();
}, 1000)

// git push -u origin main

